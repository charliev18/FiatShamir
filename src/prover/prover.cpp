#include "prover.h"

prover::prover(int k, int n, vector<int> witnesses) {
		this->k = k;
		this->n = n;
		this->witnesses = std::move(witnesses);
		this->r = 0;
}

prover::prover(int k, int n, int r, vector<int> witnesses) {
		this->k = k;
		this->n = n;
		this->r = r;
		this->witnesses = std::move(witnesses);
}

/*
 * @returns: a pseudo-random value squared
 */
int prover::calculate_x() {
		int random = Utils::random_in_range(2, this->n);
		this->r = random;
		int flip = Utils::random_in_range(0, 1);
		if (flip == 0) --flip; // flip is now either -1 or 1 with equal probability
		return Utils::mod(flip * ((int) random * random), this->n);
}

/*
 * @param toggles: k pseudo-random booleans generated by the verifier
 * @returns: the y value calculated as outlined by the protocol
 */
int prover::calculate_y(vector<bool> toggles) {
		int base = this->r;
		for (int i = 0; i < this->k; i++) {
				if (toggles[i]) {
						base = Utils::mod(base * witnesses[i], this->n);
				}
		}

		return base;
}

map<string,string> prover::serialise() const {
	return {{K_VAR,         to_string(this->k)},
			{N_VAR,         to_string(this->n)},
			{R_VAR,         to_string(this->r)},
			{WITNESS_VAR, Utils::to_string(this->witnesses)}};
}
